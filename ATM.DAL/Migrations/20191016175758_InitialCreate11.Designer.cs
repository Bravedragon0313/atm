// <auto-generated />
using System;
using ATM.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ATM.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191016175758_InitialCreate11")]
    partial class InitialCreate11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:Enum:cash_out_action_types", "published,authorized,instant,confirmed,rejected,insufficientFunds,dispenseRequested,dispensed,notified,addedPhone,redeem")
                .HasAnnotation("Npgsql:Enum:compliance_type", "authorized,sms,id_card_data,id_card_photo,sanctions,front_camera,hard_limit")
                .HasAnnotation("Npgsql:Enum:status_stage", "notSeen,published,authorized,instant,confirmed,rejected,insufficientFunds")
                .HasAnnotation("Npgsql:Enum:trade_type", "buy,sell")
                .HasAnnotation("Npgsql:Enum:transaction_authority", "timeout,machine,pending,rejected,published,authorized,confirmed")
                .HasAnnotation("Npgsql:Enum:transaction_stage", "initial_request,partial_request,final_request,partial_send,deposit,dispense_request,dispense")
                .HasAnnotation("Npgsql:Enum:verification_type", "verified,blocked,automatic")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ATM.BL.Models.AggregatedMachinePing", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Day")
                        .HasColumnName("day")
                        .HasColumnType("date");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<int>("DroppedPings")
                        .HasColumnName("dropped_pings")
                        .HasColumnType("integer");

                    b.Property<int>("LagMaxMs")
                        .HasColumnName("lag_max_ms")
                        .HasColumnType("integer");

                    b.Property<int>("LagMedianMs")
                        .HasColumnName("lag_median_ms")
                        .HasColumnType("integer");

                    b.Property<int>("LagMinMs")
                        .HasColumnName("lag_min_ms")
                        .HasColumnType("integer");

                    b.Property<int>("LagSdMs")
                        .HasColumnName("lag_sd_ms")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPings")
                        .HasColumnName("total_pings")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("aggregated_machine_pings");
                });

            modelBuilder.Entity("ATM.BL.Models.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CashInFee")
                        .HasColumnName("cash_in_fee")
                        .HasColumnType("numeric(14,5)");

                    b.Property<decimal>("CashInFeeCrypto")
                        .HasColumnName("cash_in_fee_crypto")
                        .HasColumnType("numeric(30,0)");

                    b.Property<Guid>("CashInTxsId")
                        .HasColumnName("cash_in_txs_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CryptoAtoms")
                        .HasColumnName("crypto_atoms")
                        .HasColumnType("numeric(30,0)");

                    b.Property<decimal>("CryptoAtomsAfterFee")
                        .HasColumnName("crypto_atoms_after_fee")
                        .HasColumnType("numeric(30,0)");

                    b.Property<string>("CryptoCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("crypto_code")
                        .HasColumnType("text")
                        .HasDefaultValueSql("'BTC'::text");

                    b.Property<long>("DeviceTime")
                        .HasColumnName("device_time")
                        .HasColumnType("bigint");

                    b.Property<int>("Fiat")
                        .HasColumnName("fiat")
                        .HasColumnType("integer");

                    b.Property<string>("FiatCode")
                        .IsRequired()
                        .HasColumnName("fiat_code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("bills");
                });

            modelBuilder.Entity("ATM.BL.Models.Blacklist", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<bool?>("CreatedByOperator")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_by_operator")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("CryptoCode")
                        .IsRequired()
                        .HasColumnName("crypto_code")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasIndex("CryptoCode", "Address")
                        .IsUnique()
                        .HasName("blacklist_crypto_code_address_key");

                    b.ToTable("blacklist");
                });

            modelBuilder.Entity("ATM.BL.Models.CashInAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("text");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("error_code")
                        .HasColumnType("text");

                    b.Property<string>("TxHash")
                        .HasColumnName("tx_hash")
                        .HasColumnType("text");

                    b.Property<Guid>("TxId")
                        .HasColumnName("tx_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("cash_in_actions");
                });

            modelBuilder.Entity("ATM.BL.Models.CashInRefill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("CashBoxCount")
                        .HasColumnName("cash_box_count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("cash_in_refills");
                });

            modelBuilder.Entity("ATM.BL.Models.CashInTx", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CashInFee")
                        .HasColumnName("cash_in_fee")
                        .HasColumnType("numeric(14,5)");

                    b.Property<decimal>("CashInFeeCrypto")
                        .HasColumnName("cash_in_fee_crypto")
                        .HasColumnType("numeric(30,0)");

                    b.Property<decimal?>("CommissionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("commission_percentage")
                        .HasColumnType("numeric(14,5)")
                        .HasDefaultValueSql("NULL::numeric");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CryptoAtoms")
                        .HasColumnName("crypto_atoms")
                        .HasColumnType("numeric(30,0)");

                    b.Property<string>("CryptoCode")
                        .IsRequired()
                        .HasColumnName("crypto_code")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("text");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("error_code")
                        .HasColumnType("text");

                    b.Property<long?>("Fee")
                        .HasColumnName("fee")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Fiat")
                        .HasColumnName("fiat")
                        .HasColumnType("numeric(14,5)");

                    b.Property<string>("FiatCode")
                        .IsRequired()
                        .HasColumnName("fiat_code")
                        .HasColumnType("text");

                    b.Property<bool?>("IsPaperWallet")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_paper_wallet")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<int>("MinimumTx")
                        .HasColumnName("minimum_tx")
                        .HasColumnType("integer");

                    b.Property<bool>("OperatorCompleted")
                        .HasColumnName("operator_completed")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<decimal?>("RawTickerPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("raw_ticker_price")
                        .HasColumnType("numeric(14,5)")
                        .HasDefaultValueSql("NULL::numeric");

                    b.Property<bool>("Send")
                        .HasColumnName("send")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendConfirmed")
                        .HasColumnName("send_confirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendPending")
                        .HasColumnName("send_pending")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SendTime")
                        .HasColumnName("send_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnName("terms_accepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Timedout")
                        .HasColumnName("timedout")
                        .HasColumnType("boolean");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnName("to_address")
                        .HasColumnType("text");

                    b.Property<string>("TxHash")
                        .HasColumnName("tx_hash")
                        .HasColumnType("text");

                    b.Property<int>("TxVersion")
                        .HasColumnName("tx_version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("cash_in_txs");
                });

            modelBuilder.Entity("ATM.BL.Models.CashOutAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("Denomination1")
                        .HasColumnName("denomination_1")
                        .HasColumnType("integer");

                    b.Property<int?>("Denomination2")
                        .HasColumnName("denomination_2")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("device_id")
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<long?>("DeviceTime")
                        .HasColumnName("device_time")
                        .HasColumnType("bigint");

                    b.Property<int?>("Dispensed1")
                        .HasColumnName("dispensed_1")
                        .HasColumnType("integer");

                    b.Property<int?>("Dispensed2")
                        .HasColumnName("dispensed_2")
                        .HasColumnType("integer");

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("text");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("error_code")
                        .HasColumnType("text");

                    b.Property<string>("Layer2Address")
                        .HasColumnName("layer_2_address")
                        .HasColumnType("text");

                    b.Property<int?>("Provisioned1")
                        .HasColumnName("provisioned_1")
                        .HasColumnType("integer");

                    b.Property<int?>("Provisioned2")
                        .HasColumnName("provisioned_2")
                        .HasColumnType("integer");

                    b.Property<bool>("Redeem")
                        .HasColumnName("redeem")
                        .HasColumnType("boolean");

                    b.Property<int?>("Rejected1")
                        .HasColumnName("rejected_1")
                        .HasColumnType("integer");

                    b.Property<int?>("Rejected2")
                        .HasColumnName("rejected_2")
                        .HasColumnType("integer");

                    b.Property<string>("ToAddress")
                        .HasColumnName("to_address")
                        .HasColumnType("text");

                    b.Property<string>("TxHash")
                        .HasColumnName("tx_hash")
                        .HasColumnType("text");

                    b.Property<Guid>("TxId")
                        .HasColumnName("tx_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("cash_out_actions");
                });

            modelBuilder.Entity("ATM.BL.Models.CashOutRefill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("Cassette1")
                        .HasColumnName("cassette1")
                        .HasColumnType("integer");

                    b.Property<int>("Cassette2")
                        .HasColumnName("cassette2")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Denomination1")
                        .HasColumnName("denomination1")
                        .HasColumnType("integer");

                    b.Property<int>("Denomination2")
                        .HasColumnName("denomination2")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("cash_out_refills");
                });

            modelBuilder.Entity("ATM.BL.Models.CashOutTx", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CommissionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("commission_percentage")
                        .HasColumnType("numeric(14,5)")
                        .HasDefaultValueSql("NULL::numeric");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnName("confirmed_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CryptoAtoms")
                        .HasColumnName("crypto_atoms")
                        .HasColumnType("numeric(30,0)");

                    b.Property<string>("CryptoCode")
                        .IsRequired()
                        .HasColumnName("crypto_code")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid");

                    b.Property<int?>("Denomination1")
                        .HasColumnName("denomination_1")
                        .HasColumnType("integer");

                    b.Property<int?>("Denomination2")
                        .HasColumnName("denomination_2")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<bool>("Dispense")
                        .HasColumnName("dispense")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DispenseConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dispense_confirmed")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("text");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("error_code")
                        .HasColumnType("text");

                    b.Property<decimal>("Fiat")
                        .HasColumnName("fiat")
                        .HasColumnType("numeric(14,5)");

                    b.Property<string>("FiatCode")
                        .IsRequired()
                        .HasColumnName("fiat_code")
                        .HasColumnType("text");

                    b.Property<int?>("HdIndex")
                        .HasColumnName("hd_index")
                        .HasColumnType("integer");

                    b.Property<string>("Layer2Address")
                        .HasColumnName("layer_2_address")
                        .HasColumnType("text");

                    b.Property<bool>("Notified")
                        .HasColumnName("notified")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<int?>("Provisioned1")
                        .HasColumnName("provisioned_1")
                        .HasColumnType("integer");

                    b.Property<int?>("Provisioned2")
                        .HasColumnName("provisioned_2")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnName("published_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("RawTickerPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("raw_ticker_price")
                        .HasColumnType("numeric(14,5)")
                        .HasDefaultValueSql("NULL::numeric");

                    b.Property<bool>("Redeem")
                        .HasColumnName("redeem")
                        .HasColumnType("boolean");

                    b.Property<bool>("Swept")
                        .HasColumnName("swept")
                        .HasColumnType("boolean");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnName("terms_accepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Timedout")
                        .HasColumnName("timedout")
                        .HasColumnType("boolean");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnName("to_address")
                        .HasColumnType("text");

                    b.Property<int>("TxVersion")
                        .HasColumnName("tx_version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HdIndex")
                        .IsUnique()
                        .HasName("cash_out_txs_hd_index_idx");

                    b.ToTable("cash_out_txs");
                });

            modelBuilder.Entity("ATM.BL.Models.ComplianceOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OverrideAt")
                        .HasColumnName("override_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OverrideBy")
                        .HasColumnName("override_by")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OverrideBy");

                    b.ToTable("compliance_overrides");
                });

            modelBuilder.Entity("ATM.BL.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AuthorizedAt")
                        .HasColumnName("authorized_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("AuthorizedOverrideAt")
                        .HasColumnName("authorized_override_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthorizedOverrideBy")
                        .HasColumnName("authorized_override_by")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("FrontCameraAt")
                        .HasColumnName("front_camera_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FrontCameraOverrideAt")
                        .HasColumnName("front_camera_override_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FrontCameraOverrideBy")
                        .HasColumnName("front_camera_override_by")
                        .HasColumnType("text");

                    b.Property<string>("FrontCameraPath")
                        .HasColumnName("front_camera_path")
                        .HasColumnType("text");

                    b.Property<string>("IdCardData")
                        .HasColumnName("id_card_data")
                        .HasColumnType("json");

                    b.Property<DateTime?>("IdCardDataAt")
                        .HasColumnName("id_card_data_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("IdCardDataExpiration")
                        .HasColumnName("id_card_data_expiration")
                        .HasColumnType("date");

                    b.Property<string>("IdCardDataNumber")
                        .HasColumnName("id_card_data_number")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IdCardDataOverrideAt")
                        .HasColumnName("id_card_data_override_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCardDataOverrideBy")
                        .HasColumnName("id_card_data_override_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IdCardPhotoAt")
                        .HasColumnName("id_card_photo_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("IdCardPhotoOverrideAt")
                        .HasColumnName("id_card_photo_override_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdCardPhotoOverrideBy")
                        .HasColumnName("id_card_photo_override_by")
                        .HasColumnType("text");

                    b.Property<string>("IdCardPhotoPath")
                        .HasColumnName("id_card_photo_path")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PhoneAt")
                        .HasColumnName("phone_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Sanctions")
                        .HasColumnName("sanctions")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SanctionsAt")
                        .HasColumnName("sanctions_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("SanctionsOverrideAt")
                        .HasColumnName("sanctions_override_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SanctionsOverrideBy")
                        .HasColumnName("sanctions_override_by")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SmsOverrideAt")
                        .HasColumnName("sms_override_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SmsOverrideBy")
                        .HasColumnName("sms_override_by")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedOverrideBy");

                    b.HasIndex("FrontCameraOverrideBy");

                    b.HasIndex("IdCardDataOverrideBy");

                    b.HasIndex("IdCardPhotoOverrideBy");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasName("customers_phone_key");

                    b.HasIndex("SanctionsOverrideBy");

                    b.HasIndex("SmsOverrideBy");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ATM.BL.Models.Device", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<int>("Cashbox")
                        .HasColumnName("cashbox")
                        .HasColumnType("integer");

                    b.Property<int>("Cassette1")
                        .HasColumnName("cassette1")
                        .HasColumnType("integer");

                    b.Property<int>("Cassette2")
                        .HasColumnName("cassette2")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool?>("Display")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("display")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_online")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("location")
                        .HasColumnType("json")
                        .HasDefaultValueSql("'{}'::json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<bool?>("Paired")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("paired")
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("UserConfigId")
                        .HasColumnName("user_config_id")
                        .HasColumnType("integer");

                    b.HasKey("DeviceId")
                        .HasName("devices_pkey");

                    b.HasAlternateKey("Id");

                    b.HasIndex("UserConfigId");

                    b.ToTable("devices");
                });

            modelBuilder.Entity("ATM.BL.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("ATM.BL.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<string>("LogLevel")
                        .HasColumnName("log_level")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<int>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ServerTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("server_timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("ATM.BL.Models.MachineEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeviceTime")
                        .HasColumnName("device_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnName("event_type")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("machine_events");
                });

            modelBuilder.Entity("ATM.BL.Models.MachinePing", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeviceTime")
                        .HasColumnName("device_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("DeviceId")
                        .HasName("pk_device_id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasName("u_device_id");

                    b.ToTable("machine_pings");
                });

            modelBuilder.Entity("ATM.BL.Models.OneTimePasses", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Token")
                        .HasName("one_time_passes_pkey");

                    b.HasAlternateKey("Id");

                    b.ToTable("one_time_passes");
                });

            modelBuilder.Entity("ATM.BL.Models.PairingToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("pairing_tokens");
                });

            modelBuilder.Entity("ATM.BL.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("ATM.BL.Models.SanctionsLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<string>("SanctionedAliasFullName")
                        .IsRequired()
                        .HasColumnName("sanctioned_alias_full_name")
                        .HasColumnType("text");

                    b.Property<string>("SanctionedAliasId")
                        .HasColumnName("sanctioned_alias_id")
                        .HasColumnType("text");

                    b.Property<string>("SanctionedId")
                        .IsRequired()
                        .HasColumnName("sanctioned_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("sanctions_logs");
                });

            modelBuilder.Entity("ATM.BL.Models.ServerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnName("event_type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasName("server_events_created_idx");

                    b.ToTable("server_events");
                });

            modelBuilder.Entity("ATM.BL.Models.SupportLogs", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("support_logs");
                });

            modelBuilder.Entity("ATM.BL.Models.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("CryptoAtoms")
                        .HasColumnName("crypto_atoms")
                        .HasColumnType("numeric(30,0)");

                    b.Property<string>("CryptoCode")
                        .IsRequired()
                        .HasColumnName("crypto_code")
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("text");

                    b.Property<string>("FiatCode")
                        .IsRequired()
                        .HasColumnName("fiat_code")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("trades");
                });

            modelBuilder.Entity("ATM.BL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ATM.BL.Models.DeviceConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("json");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.Property<bool>("Valid")
                        .HasColumnName("valid")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("user_config");
                });

            modelBuilder.Entity("ATM.BL.Models.CustomerToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Token")
                        .HasName("user_tokens_pkey");

                    b.HasAlternateKey("Id");

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("ATM.BL.Models.CashInTx", b =>
                {
                    b.HasOne("ATM.BL.Models.Customer", "Customer")
                        .WithMany("CashInTx")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("cash_in_txs_customer_id_fkey");
                });

            modelBuilder.Entity("ATM.BL.Models.CashOutTx", b =>
                {
                    b.HasOne("ATM.BL.Models.Customer", "Customer")
                        .WithMany("CashOutTx")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("cash_out_txs_customer_id_fkey");
                });

            modelBuilder.Entity("ATM.BL.Models.ComplianceOverride", b =>
                {
                    b.HasOne("ATM.BL.Models.Customer", "Customer")
                        .WithMany("ComplianceOverride")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("compliance_authorizations_customer_id_fkey");

                    b.HasOne("ATM.BL.Models.CustomerToken", "OverrideByNavigation")
                        .WithMany("ComplianceOverride")
                        .HasForeignKey("OverrideBy")
                        .HasConstraintName("compliance_authorizations_authorized_by_fkey");
                });

            modelBuilder.Entity("ATM.BL.Models.Customer", b =>
                {
                    b.HasOne("ATM.BL.Models.CustomerToken", "AuthorizedOverrideByNavigation")
                        .WithMany("CustomersAuthorizedOverrideByNavigation")
                        .HasForeignKey("AuthorizedOverrideBy")
                        .HasConstraintName("customers_authorized_override_by_fkey");

                    b.HasOne("ATM.BL.Models.CustomerToken", "FrontCameraOverrideByNavigation")
                        .WithMany("CustomersFrontCameraOverrideByNavigation")
                        .HasForeignKey("FrontCameraOverrideBy")
                        .HasConstraintName("customers_front_facing_cam_override_by_fkey");

                    b.HasOne("ATM.BL.Models.CustomerToken", "IdCardDataOverrideByNavigation")
                        .WithMany("CustomersIdCardDataOverrideByNavigation")
                        .HasForeignKey("IdCardDataOverrideBy")
                        .HasConstraintName("customers_id_card_data_override_by_fkey");

                    b.HasOne("ATM.BL.Models.CustomerToken", "IdCardPhotoOverrideByNavigation")
                        .WithMany("CustomersIdCardPhotoOverrideByNavigation")
                        .HasForeignKey("IdCardPhotoOverrideBy")
                        .HasConstraintName("customers_id_card_photo_override_by_fkey");

                    b.HasOne("ATM.BL.Models.CustomerToken", "SanctionsOverrideByNavigation")
                        .WithMany("CustomersSanctionsOverrideByNavigation")
                        .HasForeignKey("SanctionsOverrideBy")
                        .HasConstraintName("customers_sanctions_check_override_by_fkey");

                    b.HasOne("ATM.BL.Models.CustomerToken", "SmsOverrideByNavigation")
                        .WithMany("CustomersSmsOverrideByNavigation")
                        .HasForeignKey("SmsOverrideBy")
                        .HasConstraintName("customers_sms_override_by_fkey");
                });

            modelBuilder.Entity("ATM.BL.Models.Device", b =>
                {
                    b.HasOne("ATM.BL.Models.DeviceConfig", "DeviceConfig")
                        .WithMany("Device")
                        .HasForeignKey("UserConfigId")
                        .HasConstraintName("user_config_id");
                });

            modelBuilder.Entity("ATM.BL.Models.Ingredient", b =>
                {
                    b.HasOne("ATM.BL.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATM.BL.Models.Recipe", b =>
                {
                    b.HasOne("ATM.BL.Models.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATM.BL.Models.SanctionsLog", b =>
                {
                    b.HasOne("ATM.BL.Models.Customer", "Customer")
                        .WithMany("SanctionsLog")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("sanctions_logs_customer_id_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
